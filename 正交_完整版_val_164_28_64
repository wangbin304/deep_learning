

from __future__ import print_function

import sys
import argparse
import time
import math

import torch
import torch.backends.cudnn as cudnn

from main_ce import set_loader
from util import AverageMeter
from util import adjust_learning_rate, warmup_learning_rate, accuracy
from util import set_optimizer
from networks.resnet_big import SupConResNet, LinearClassifier



import torch.nn.functional as F

try:
    import apex
    from apex import amp, optimizers
except ImportError:
    pass


def parse_option():
    parser = argparse.ArgumentParser('argument for training')

    parser.add_argument('--print_freq', type=int, default=10,
                        help='print frequency')
    parser.add_argument('--save_freq', type=int, default=50,
                        help='save frequency')
    parser.add_argument('--batch_size', type=int, default=256,# 256
                        help='batch_size')
    parser.add_argument('--num_workers', type=int, default=4,
                        help='num of workers to use')
    parser.add_argument('--epochs', type=int, default=100,
                        help='number of training epochs')

    # optimization
    parser.add_argument('--learning_rate', type=float, default=0.1,
                        help='learning rate')
    parser.add_argument('--lr_decay_epochs', type=str, default='60,75,90', # 60,75,90
                        help='where to decay lr, can be a list')
    parser.add_argument('--lr_decay_rate', type=float, default=0.2,
                        help='decay rate for learning rate')
    parser.add_argument('--weight_decay', type=float, default=0,
                        help='weight decay')
    parser.add_argument('--momentum', type=float, default=0.9,
                        help='momentum')

    # model dataset
    parser.add_argument('--model', type=str, default='resnet50')
    parser.add_argument('--dataset', type=str, default='cifar100',
                        choices=['cifar10', 'cifar100'], help='dataset')

    # other setting
    # parser.add_argument('--cosine', action='store_true',
    #                     help='using cosine annealing')
    parser.add_argument('--cosine', default='true',
                        help='using cosine annealing')
    parser.add_argument('--warm', action='store_true',
                        help='warm-up for large batch training')


    parser.add_argument('--ckpt', type=str, default='.\save\SupCon\cifar100_models\SupCon_cifar100_resnet50_lr_0.05_decay_0.0001_bsz_96_temp_0.07_trial1_0\ckpt_epoch_200.pth', #170
                        help='path to pre-trained model')

    # parser.add_argument('--ckpt', type=str, default='./save/SupCon/cifar100_models/SupCon_cifar100_resnet50_lr_0.05_decay_0.0001_bsz_96_temp_0.07_trial1_0/last.pth', # 940 # 950
    #                     help='path to pre-trained model')

    opt = parser.parse_args()
    # set the path according to the environment
    opt.data_folder = './datasets1/'

    iterations = opt.lr_decay_epochs.split(',')
    opt.lr_decay_epochs = list([])
    for it in iterations:
        opt.lr_decay_epochs.append(int(it))

    opt.model_name = '{}_{}_lr_{}_decay_{}_bsz_{}'.\
        format(opt.dataset, opt.model, opt.learning_rate, opt.weight_decay,
               opt.batch_size)

    if opt.cosine:
        opt.model_name = '{}_cosine'.format(opt.model_name)

    # warm-up for large-batch training,
    if opt.warm:
        opt.model_name = '{}_warm'.format(opt.model_name)
        opt.warmup_from = 0.01
        opt.warm_epochs = 10
        if opt.cosine:
            eta_min = opt.learning_rate * (opt.lr_decay_rate ** 3)
            opt.warmup_to = eta_min + (opt.learning_rate - eta_min) * (
                    1 + math.cos(math.pi * opt.warm_epochs / opt.epochs)) / 2
        else:
            opt.warmup_to = opt.learning_rate

    if opt.dataset == 'cifar10':
        opt.n_cls = 10
    elif opt.dataset == 'cifar100':
        opt.n_cls = 100
    else:
        raise ValueError('dataset not supported: {}'.format(opt.dataset))

    return opt


def set_model(opt):
    model = SupConResNet(name=opt.model)
    criterion = torch.nn.CrossEntropyLoss()

    classifier = LinearClassifier(name=opt.model, num_classes=opt.n_cls)

    ckpt = torch.load(opt.ckpt, map_location='cpu')
    state_dict = ckpt['model']

    if torch.cuda.is_available():
        if torch.cuda.device_count() > 1:
            model = torch.nn.DataParallel(model)
        else:
            new_state_dict = {}
            for k, v in state_dict.items():
                k = k.replace("module.", "")
                new_state_dict[k] = v
            state_dict = new_state_dict
        model = model.cuda()
        classifier = classifier.cuda()
        criterion = criterion.cuda()
        cudnn.benchmark = True

        model.load_state_dict(state_dict)

    return model, classifier, criterion


def train(train_loader, model, classifier, criterion, optimizer, epoch, opt):
    """one epoch training"""
    model.eval()
    classifier.train()

    batch_time = AverageMeter()
    data_time = AverageMeter()
    losses = AverageMeter()
    top1 = AverageMeter()

    end = time.time()
    for idx, (images, labels) in enumerate(train_loader):
        images = torch.cat([images[0], images[1]], dim=0)

        data_time.update(time.time() - end)

        images = images.cuda(non_blocking=True)
        labels = labels.cuda(non_blocking=True)
        bsz = labels.shape[0]

        # warm-up learning rate
        warmup_learning_rate(opt, epoch, idx, len(train_loader), optimizer)

        # compute loss
        with torch.no_grad():
            features = model(images)

        # # ###
        # f1, f2 = torch.split(features, [bsz, bsz], dim=0)
        # features = torch.cat([f1.unsqueeze(1), f2.unsqueeze(1)], dim=1)
        # # features_a,_ = torch.split(features, [192,64], dim=2)
        # # _,features_b = torch.split(features, [164,92], dim=2)
        # features_a,features_b,features_c=torch.split(features,[164,28,64],dim=2)
        # features_a = torch.cat(torch.unbind(features_a, dim=1), dim=0)
        # features_b = torch.cat(torch.unbind(features_b, dim=1), dim=0)
        # features_c = torch.cat(torch.unbind(features_c, dim=1), dim=0)
        #
        # features_n,_=torch.split(features, [192, 64], dim=2)
        # features_new=torch.cat(torch.unbind(features_n,dim=1),dim=0)
        #
        # output_a = classifier(features_a.detach(),1)
        # output_b = classifier(features_b.detach(),2)
        # output_c = classifier(features_c.detach(),3)
        #
        # import math
        # a1 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_b, dim=1, keepdim=True)
        # a2 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
        # a3 = torch.norm(output_b, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
        # b1 = output_a * output_b / a1
        # b2 = output_a * output_c / a2
        # b3 = output_b * output_c / a3
        # e = torch.tensor(math.e, dtype=torch.float32).cuda()
        # c1 = torch.pow(e, b1)
        # c2 = torch.pow(e, b2)
        # c3 = torch.pow(e, b3)
        # d = torch.sum(c1+c2+c3)
        # ###
        f1, f2 = torch.split(features, [bsz, bsz], dim=0)
        features = torch.cat([f1.unsqueeze(1), f2.unsqueeze(1)], dim=1)
        # features_a,_ = torch.split(features, [192,64], dim=2)
        # _,features_b = torch.split(features, [164,92], dim=2)
        # features_a, _ = torch.split(features, [192, 64], dim=2)
        # _, features_c = torch.split(features, [192, 64], dim=2)
        features_a,features_b,features_c=torch.split(features,[164,28,64],dim=2)


        features_a = torch.cat(torch.unbind(features_a, dim=1), dim=0)
        features_b = torch.cat(torch.unbind(features_b, dim=1), dim=0)
        features_c = torch.cat(torch.unbind(features_c, dim=1), dim=0)



        output_a = classifier(features_a.detach(), 1)
        output_b = classifier(features_b.detach(), 2)
        output_c = classifier(features_c.detach(), 3)


        features_n, _ = torch.split(features, [256,0], dim=2)
        # features_n=torch.cat([output_a,output_b,output_c],dim=1)
        features_new = torch.cat(torch.unbind(features_n, dim=1), dim=0)


        ### 特征向量非负
        output_a = torch.relu(output_a)
        output_b=torch.relu(output_b)
        output_c = torch.relu(output_c)

        import math
        e = torch.tensor(math.e, dtype=torch.float32).cuda()

        a1 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_b, dim=1, keepdim=True)
        b1 = torch.sum(output_a * output_b, dim=1 , keepdim=True) / a1
        c1=torch.pow(e,b1)-1

        a2 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
        b2 = torch.sum(output_a * output_c, dim=1,keepdim=True) / a2
        c2 = torch.pow(e, b2) - 1

        a3 = torch.norm(output_b, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
        b3 = torch.sum(output_b * output_c, dim=1, keepdim=True) / a3
        c3 = torch.pow(e, b3) - 1

        d = torch.sum(c1)+torch.sum(c2)+torch.sum(c3)


        labels = labels.contiguous().view(-1, 1)


        labels = torch.cat((labels, labels), dim=0)

        output = classifier(features_new.detach())


        labels=labels.squeeze(1)
        loss = criterion(output, labels)+d

        # update metric
        losses.update(loss.item(), bsz)
        acc1, acc5 = accuracy(output, labels, topk=(1, 5))
        top1.update(acc1[0], bsz)

        # SGD
        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        # measure elapsed time
        batch_time.update(time.time() - end)
        end = time.time()

        # print info
        if (idx + 1) % opt.print_freq == 0:
            print('Train: [{0}][{1}/{2}]\t'
                  'BT {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                  'DT {data_time.val:.3f} ({data_time.avg:.3f})\t'
                  'loss {loss.val:.3f} ({loss.avg:.3f})\t'
                  'Acc@1 {top1.val:.3f} ({top1.avg:.3f})'.format(
                   epoch, idx + 1, len(train_loader), batch_time=batch_time,
                   data_time=data_time, loss=losses, top1=top1))
            sys.stdout.flush()

    return losses.avg, top1.avg


def validate(val_loader, model, classifier, criterion, opt):
    """validation"""
    model.eval()
    classifier.eval()

    batch_time = AverageMeter()
    losses = AverageMeter()
    top1 = AverageMeter()

    with torch.no_grad():
        end = time.time()
        for idx, (images, labels) in enumerate(val_loader):



            images = images.float().cuda()
            labels = labels.cuda()
            bsz = labels.shape[0]

            # # forward
            # features=model(images)
            # features_a, features_b, features_c = torch.split(features, [164, 28, 64], dim=1)
            #
            # output_a = classifier(features_a.detach(), 1)
            # output_b = classifier(features_b.detach(), 2)
            # output_c = classifier(features_c.detach(), 3)
            #
            # import math
            # a1 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_b, dim=1, keepdim=True)
            # a2 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
            # a3 = torch.norm(output_b, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
            # b1 = output_a * output_b / a1
            # b2 = output_a * output_c / a2
            # b3 = output_b * output_c / a3
            # e = torch.tensor(math.e, dtype=torch.float32).cuda()
            # c1 = torch.pow(e, b1)
            # c2 = torch.pow(e, b2)
            # c3 = torch.pow(e, b3)
            # d = torch.sum(c1 + c2 + c3)
            #
            # features_n, _ = torch.split(features, [192, 64], dim=1)
            # output = classifier(features_n.detach())

            # forward
            features = model(images)
            features_a, features_b, features_c = torch.split(features, [164, 28, 64], dim=1)


            output_a = classifier(features_a.detach(), 1)
            output_b = classifier(features_b.detach(), 2)
            output_c = classifier(features_c.detach(), 3)

            features_new, _ = torch.split(features, [256,0], dim=1)
            # features_n = torch.cat([output_a, output_b, output_c], dim=1)
            # features_new = torch.cat(torch.unbind(features_n, dim=1), dim=0)

            ### 特征向量非负
            output_a = torch.relu(output_a)
            output_b=torch.relu(output_b)
            output_c = torch.relu(output_c)

            import math
            e = torch.tensor(math.e, dtype=torch.float32).cuda()

            a1 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_b, dim=1, keepdim=True)
            b1 = torch.sum(output_a * output_b, dim=1, keepdim=True) / a1
            c1 = torch.pow(e, b1) - 1

            a2 = torch.norm(output_a, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
            b2 = torch.sum(output_a * output_c, dim=1, keepdim=True) / a2
            c2 = torch.pow(e, b2) - 1

            a3 = torch.norm(output_b, dim=1, keepdim=True) * torch.norm(output_c, dim=1, keepdim=True)
            b3 = torch.sum(output_b * output_c, dim=1, keepdim=True) / a3
            c3 = torch.pow(e, b3) - 1
            # d = torch.sum(c1 + c2 + c3)
            d=torch.sum(c1)+torch.sum(c2)+torch.sum(c3)
            output = classifier(features_new.detach())


            # output1=classifier(features_64,64)

            loss = criterion(output, labels)+d

            # update metric
            losses.update(loss.item(), bsz)
            acc1, acc5 = accuracy(output, labels, topk=(1, 5))
            top1.update(acc1[0], bsz)

            # measure elapsed time
            batch_time.update(time.time() - end)
            end = time.time()

            if idx % opt.print_freq == 0:
                print('Test: [{0}/{1}]\t'
                      'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\t'
                      'Loss {loss.val:.4f} ({loss.avg:.4f})\t'
                      'Acc@1 {top1.val:.3f} ({top1.avg:.3f})'.format(
                       idx, len(val_loader), batch_time=batch_time,
                       loss=losses, top1=top1))

    print(' * Acc@1 {top1.avg:.3f}'.format(top1=top1))
    return losses.avg, top1.avg


def main():
    best_acc = 0


    for ep in range(1000,3250,250):
        opt = parse_option()

        # build data loader
        train_loader, val_loader = set_loader(opt)

        # build model and criterion
        model, classifier, criterion = set_model(opt)

        # build optimizer
        optimizer = set_optimizer(opt, classifier)

        # training routine
        for epoch in range(1, opt.epochs + 1):
            adjust_learning_rate(opt, optimizer, epoch)

            # train for one epoch
            time1 = time.time()
            loss, acc = train(train_loader, model, classifier, criterion,
                              optimizer, epoch, opt)
            time2 = time.time()
            print('Train epoch {}, total time {:.2f}, accuracy:{:.2f}'.format(
                epoch, time2 - time1, acc))

            # eval for one epoch
            loss, val_acc = validate(val_loader, model, classifier, criterion, opt)
            if val_acc > best_acc:
                best_acc = val_acc

        print('best accuracy: {:.2f}'.format(best_acc))


if __name__ == '__main__':
    main()
    
    
    
    
    
    





"""ResNet in PyTorch.
ImageNet-Style ResNet
[1] Kaiming He, Xiangyu Zhang, Shaoqing Ren, Jian Sun
    Deep Residual Learning for Image Recognition. arXiv:1512.03385
Adapted from: https://github.com/bearpaw/pytorch-classification
"""
import torch
import torch.nn as nn
import torch.nn.functional as F


class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, in_planes, planes, stride=1, is_last=False):
        super(BasicBlock, self).__init__()
        self.is_last = is_last
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != self.expansion * planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion * planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.bn2(self.conv2(out))
        out += self.shortcut(x)
        preact = out
        out = F.relu(out)
        if self.is_last:
            return out, preact
        else:
            return out


class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, in_planes, planes, stride=1, is_last=False):
        super(Bottleneck, self).__init__()
        self.is_last = is_last
        self.conv1 = nn.Conv2d(in_planes, planes, kernel_size=1, bias=False)
        self.bn1 = nn.BatchNorm2d(planes)
        self.conv2 = nn.Conv2d(planes, planes, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(planes)
        self.conv3 = nn.Conv2d(planes, self.expansion * planes, kernel_size=1, bias=False)
        self.bn3 = nn.BatchNorm2d(self.expansion * planes)

        self.shortcut = nn.Sequential()
        if stride != 1 or in_planes != self.expansion * planes:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(self.expansion * planes)
            )

    def forward(self, x):
        out = F.relu(self.bn1(self.conv1(x)))
        out = F.relu(self.bn2(self.conv2(out)))
        out = self.bn3(self.conv3(out))
        out += self.shortcut(x)
        preact = out
        out = F.relu(out)
        if self.is_last:
            return out, preact
        else:
            return out


class ResNet(nn.Module):
    def __init__(self, block, num_blocks, in_channel=3, zero_init_residual=False):
        super(ResNet, self).__init__()
        self.in_planes = 64

        self.conv1 = nn.Conv2d(in_channel, 64, kernel_size=3, stride=1, padding=1,
                               bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.layer1 = self._make_layer(block, 64, num_blocks[0], stride=1)
        self.layer2 = self._make_layer(block, 128, num_blocks[1], stride=2)
        self.layer3 = self._make_layer(block, 256, num_blocks[2], stride=2)
        self.layer4 = self._make_layer(block, 512, num_blocks[3], stride=2)
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves
        # like an identity. This improves the model by 0.2~0.3% according to:
        # https://arxiv.org/abs/1706.02677
        if zero_init_residual:
            for m in self.modules():
                if isinstance(m, Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                elif isinstance(m, BasicBlock):
                    nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, num_blocks, stride):
        strides = [stride] + [1] * (num_blocks - 1)
        layers = []
        for i in range(num_blocks):
            stride = strides[i]
            layers.append(block(self.in_planes, planes, stride))
            self.in_planes = planes * block.expansion
        return nn.Sequential(*layers)

    def forward(self, x, layer=100):
        out = F.relu(self.bn1(self.conv1(x)))
        out = self.layer1(out)
        out = self.layer2(out)
        out = self.layer3(out)
        out = self.layer4(out)
        out = self.avgpool(out)
        out = torch.flatten(out, 1)
        return out


def resnet18(**kwargs):
    return ResNet(BasicBlock, [2, 2, 2, 2], **kwargs)


def resnet34(**kwargs):
    return ResNet(BasicBlock, [3, 4, 6, 3], **kwargs)


def resnet50(**kwargs):
    return ResNet(Bottleneck, [3, 4, 6, 3], **kwargs)


def resnet101(**kwargs):
    return ResNet(Bottleneck, [3, 4, 23, 3], **kwargs)


model_dict = {
    'resnet18': [resnet18, 512],
    'resnet34': [resnet34, 512],
    'resnet50': [resnet50, 2048],
    'resnet101': [resnet101, 2048],
}


class LinearBatchNorm(nn.Module):
    """Implements BatchNorm1d by BatchNorm2d, for SyncBN purpose"""
    def __init__(self, dim, affine=True):
        super(LinearBatchNorm, self).__init__()
        self.dim = dim
        self.bn = nn.BatchNorm2d(dim, affine=affine)

    def forward(self, x):
        x = x.view(-1, self.dim, 1, 1)
        x = self.bn(x)
        x = x.view(-1, self.dim)
        return x


class SupConResNet(nn.Module):
    """backbone + projection head"""
    def __init__(self, name='resnet50', head='mlp', feat_dim=256):
        super(SupConResNet, self).__init__()
        model_fun, dim_in = model_dict[name]
        self.encoder = model_fun()
        if head == 'linear':
            self.head = nn.Linear(dim_in, feat_dim)
        elif head == 'mlp':
            self.head = nn.Sequential(
                nn.Linear(dim_in, dim_in),
                nn.ReLU(inplace=True),
                nn.Linear(dim_in, feat_dim)
            )
        else:
            raise NotImplementedError(
                'head not supported: {}'.format(head))

    def forward(self, x):
        feat = self.encoder(x)
        feat = F.normalize(self.head(feat), dim=1)
        return feat


class SupCEResNet(nn.Module):
    """encoder + classifier"""
    def __init__(self, name='resnet50', num_classes=10):
        super(SupCEResNet, self).__init__()
        model_fun, dim_in = model_dict[name]
        self.encoder = model_fun()
        self.fc = nn.Linear(dim_in, num_classes)

    def forward(self, x):
        return self.fc(self.encoder(x))


class LinearClassifier(nn.Module):
    """Linear classifier"""
    def __init__(self, name='resnet50', num_classes=100):
        super(LinearClassifier, self).__init__()
        _, feat_dim = model_dict[name]
        # self.fc = nn.Linear(256, num_classes)
        # self.fc1 = nn.Linear
        # self.fc2 = nn.Linear(32, num_classes)


        self.fc1=nn.Linear(164,64)
        self.fc2=nn.Linear(28,64)
        self.fc3=nn.Linear(64,64)

        self.fc11=nn.Linear(256,num_classes)



    def forward(self, features,step=4):
        if step==1:
            return self.fc1(features)
        elif step==2:
            return self.fc2(features)
        elif step==3:
            return self.fc3(features)
        else:
            return self.fc11(features)
        # if flag%2==0:
        #     return self.fc1(features)
        # else:
        #     return self.fc2(features)

